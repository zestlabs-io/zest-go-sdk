// Code generated by go-swagger; DO NOT EDIT.

package appscape_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zestlabs-io/zest-go-sdk/api/models"
)

// AppscapeServiceQueryLogsReader is a Reader for the AppscapeServiceQueryLogs structure.
type AppscapeServiceQueryLogsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AppscapeServiceQueryLogsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAppscapeServiceQueryLogsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAppscapeServiceQueryLogsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAppscapeServiceQueryLogsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAppscapeServiceQueryLogsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAppscapeServiceQueryLogsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewAppscapeServiceQueryLogsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAppscapeServiceQueryLogsOK creates a AppscapeServiceQueryLogsOK with default headers values
func NewAppscapeServiceQueryLogsOK() *AppscapeServiceQueryLogsOK {
	return &AppscapeServiceQueryLogsOK{}
}

/*AppscapeServiceQueryLogsOK handles this case with default header values.

A successful response.
*/
type AppscapeServiceQueryLogsOK struct {
	Payload *models.V1QueryLogsResponse
}

func (o *AppscapeServiceQueryLogsOK) Error() string {
	return fmt.Sprintf("[POST /api/appscape/v1/logs/query][%d] appscapeServiceQueryLogsOK  %+v", 200, o.Payload)
}

func (o *AppscapeServiceQueryLogsOK) GetPayload() *models.V1QueryLogsResponse {
	return o.Payload
}

func (o *AppscapeServiceQueryLogsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1QueryLogsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppscapeServiceQueryLogsBadRequest creates a AppscapeServiceQueryLogsBadRequest with default headers values
func NewAppscapeServiceQueryLogsBadRequest() *AppscapeServiceQueryLogsBadRequest {
	return &AppscapeServiceQueryLogsBadRequest{}
}

/*AppscapeServiceQueryLogsBadRequest handles this case with default header values.

Returned when the caller provided incorrect request parameters.
*/
type AppscapeServiceQueryLogsBadRequest struct {
	Payload string
}

func (o *AppscapeServiceQueryLogsBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/appscape/v1/logs/query][%d] appscapeServiceQueryLogsBadRequest  %+v", 400, o.Payload)
}

func (o *AppscapeServiceQueryLogsBadRequest) GetPayload() string {
	return o.Payload
}

func (o *AppscapeServiceQueryLogsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppscapeServiceQueryLogsForbidden creates a AppscapeServiceQueryLogsForbidden with default headers values
func NewAppscapeServiceQueryLogsForbidden() *AppscapeServiceQueryLogsForbidden {
	return &AppscapeServiceQueryLogsForbidden{}
}

/*AppscapeServiceQueryLogsForbidden handles this case with default header values.

Returned when the caller is not authorised to perform this call.
*/
type AppscapeServiceQueryLogsForbidden struct {
	Payload string
}

func (o *AppscapeServiceQueryLogsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/appscape/v1/logs/query][%d] appscapeServiceQueryLogsForbidden  %+v", 403, o.Payload)
}

func (o *AppscapeServiceQueryLogsForbidden) GetPayload() string {
	return o.Payload
}

func (o *AppscapeServiceQueryLogsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppscapeServiceQueryLogsNotFound creates a AppscapeServiceQueryLogsNotFound with default headers values
func NewAppscapeServiceQueryLogsNotFound() *AppscapeServiceQueryLogsNotFound {
	return &AppscapeServiceQueryLogsNotFound{}
}

/*AppscapeServiceQueryLogsNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type AppscapeServiceQueryLogsNotFound struct {
	Payload string
}

func (o *AppscapeServiceQueryLogsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/appscape/v1/logs/query][%d] appscapeServiceQueryLogsNotFound  %+v", 404, o.Payload)
}

func (o *AppscapeServiceQueryLogsNotFound) GetPayload() string {
	return o.Payload
}

func (o *AppscapeServiceQueryLogsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppscapeServiceQueryLogsInternalServerError creates a AppscapeServiceQueryLogsInternalServerError with default headers values
func NewAppscapeServiceQueryLogsInternalServerError() *AppscapeServiceQueryLogsInternalServerError {
	return &AppscapeServiceQueryLogsInternalServerError{}
}

/*AppscapeServiceQueryLogsInternalServerError handles this case with default header values.

Returned when an error occurred while processing the process.
*/
type AppscapeServiceQueryLogsInternalServerError struct {
	Payload string
}

func (o *AppscapeServiceQueryLogsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/appscape/v1/logs/query][%d] appscapeServiceQueryLogsInternalServerError  %+v", 500, o.Payload)
}

func (o *AppscapeServiceQueryLogsInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *AppscapeServiceQueryLogsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppscapeServiceQueryLogsDefault creates a AppscapeServiceQueryLogsDefault with default headers values
func NewAppscapeServiceQueryLogsDefault(code int) *AppscapeServiceQueryLogsDefault {
	return &AppscapeServiceQueryLogsDefault{
		_statusCode: code,
	}
}

/*AppscapeServiceQueryLogsDefault handles this case with default header values.

An unexpected error response
*/
type AppscapeServiceQueryLogsDefault struct {
	_statusCode int

	Payload *models.RuntimeError
}

// Code gets the status code for the appscape service query logs default response
func (o *AppscapeServiceQueryLogsDefault) Code() int {
	return o._statusCode
}

func (o *AppscapeServiceQueryLogsDefault) Error() string {
	return fmt.Sprintf("[POST /api/appscape/v1/logs/query][%d] AppscapeService_QueryLogs default  %+v", o._statusCode, o.Payload)
}

func (o *AppscapeServiceQueryLogsDefault) GetPayload() *models.RuntimeError {
	return o.Payload
}

func (o *AppscapeServiceQueryLogsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
