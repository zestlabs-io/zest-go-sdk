// Code generated by go-swagger; DO NOT EDIT.

package appscape_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new appscape service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for appscape service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AppscapeServiceGetLogLabels(params *AppscapeServiceGetLogLabelsParams, opts ...ClientOption) (*AppscapeServiceGetLogLabelsOK, error)

	AppscapeServiceGetMetricsMeta(params *AppscapeServiceGetMetricsMetaParams, opts ...ClientOption) (*AppscapeServiceGetMetricsMetaOK, error)

	AppscapeServiceQueryLogs(params *AppscapeServiceQueryLogsParams, opts ...ClientOption) (*AppscapeServiceQueryLogsOK, error)

	AppscapeServiceQueryMetrics(params *AppscapeServiceQueryMetricsParams, opts ...ClientOption) (*AppscapeServiceQueryMetricsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AppscapeServiceGetLogLabels retrieves all labels and possible values currently used to index the logs
*/
func (a *Client) AppscapeServiceGetLogLabels(params *AppscapeServiceGetLogLabelsParams, opts ...ClientOption) (*AppscapeServiceGetLogLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppscapeServiceGetLogLabelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppscapeService_GetLogLabels",
		Method:             "GET",
		PathPattern:        "/api/appscape/v1/logs/labels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AppscapeServiceGetLogLabelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppscapeServiceGetLogLabelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppscapeServiceGetLogLabelsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AppscapeServiceGetMetricsMeta lists all available metrics in the system returning metric name and short description
*/
func (a *Client) AppscapeServiceGetMetricsMeta(params *AppscapeServiceGetMetricsMetaParams, opts ...ClientOption) (*AppscapeServiceGetMetricsMetaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppscapeServiceGetMetricsMetaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppscapeService_GetMetricsMeta",
		Method:             "GET",
		PathPattern:        "/api/appscape/v1/metrics/meta",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AppscapeServiceGetMetricsMetaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppscapeServiceGetMetricsMetaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppscapeServiceGetMetricsMetaDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AppscapeServiceQueryLogs retrieves all logs that match the provided filters
*/
func (a *Client) AppscapeServiceQueryLogs(params *AppscapeServiceQueryLogsParams, opts ...ClientOption) (*AppscapeServiceQueryLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppscapeServiceQueryLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppscapeService_QueryLogs",
		Method:             "POST",
		PathPattern:        "/api/appscape/v1/logs/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AppscapeServiceQueryLogsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppscapeServiceQueryLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppscapeServiceQueryLogsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AppscapeServiceQueryMetrics retrieves data of a metrics matching the provided parameters
*/
func (a *Client) AppscapeServiceQueryMetrics(params *AppscapeServiceQueryMetricsParams, opts ...ClientOption) (*AppscapeServiceQueryMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppscapeServiceQueryMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppscapeService_QueryMetrics",
		Method:             "POST",
		PathPattern:        "/api/appscape/v1/metrics/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AppscapeServiceQueryMetricsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppscapeServiceQueryMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppscapeServiceQueryMetricsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
