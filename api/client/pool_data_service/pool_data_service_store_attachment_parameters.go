// Code generated by go-swagger; DO NOT EDIT.

package pool_data_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPoolDataServiceStoreAttachmentParams creates a new PoolDataServiceStoreAttachmentParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPoolDataServiceStoreAttachmentParams() *PoolDataServiceStoreAttachmentParams {
	return &PoolDataServiceStoreAttachmentParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPoolDataServiceStoreAttachmentParamsWithTimeout creates a new PoolDataServiceStoreAttachmentParams object
// with the ability to set a timeout on a request.
func NewPoolDataServiceStoreAttachmentParamsWithTimeout(timeout time.Duration) *PoolDataServiceStoreAttachmentParams {
	return &PoolDataServiceStoreAttachmentParams{
		timeout: timeout,
	}
}

// NewPoolDataServiceStoreAttachmentParamsWithContext creates a new PoolDataServiceStoreAttachmentParams object
// with the ability to set a context for a request.
func NewPoolDataServiceStoreAttachmentParamsWithContext(ctx context.Context) *PoolDataServiceStoreAttachmentParams {
	return &PoolDataServiceStoreAttachmentParams{
		Context: ctx,
	}
}

// NewPoolDataServiceStoreAttachmentParamsWithHTTPClient creates a new PoolDataServiceStoreAttachmentParams object
// with the ability to set a custom HTTPClient for a request.
func NewPoolDataServiceStoreAttachmentParamsWithHTTPClient(client *http.Client) *PoolDataServiceStoreAttachmentParams {
	return &PoolDataServiceStoreAttachmentParams{
		HTTPClient: client,
	}
}

/* PoolDataServiceStoreAttachmentParams contains all the parameters to send to the API endpoint
   for the pool data service store attachment operation.

   Typically these are written to a http.Request.
*/
type PoolDataServiceStoreAttachmentParams struct {

	/* Attname.

	   Attachment name
	*/
	Attname string

	/* ID.

	   The ID (Primary Key) of the record
	*/
	ID string

	/* PoolID.

	   Pool ID (e.g. orders)
	*/
	PoolID string

	/* Upfile.

	   The attachment content file
	*/
	Upfile runtime.NamedReadCloser

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the pool data service store attachment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PoolDataServiceStoreAttachmentParams) WithDefaults() *PoolDataServiceStoreAttachmentParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the pool data service store attachment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PoolDataServiceStoreAttachmentParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the pool data service store attachment params
func (o *PoolDataServiceStoreAttachmentParams) WithTimeout(timeout time.Duration) *PoolDataServiceStoreAttachmentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the pool data service store attachment params
func (o *PoolDataServiceStoreAttachmentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the pool data service store attachment params
func (o *PoolDataServiceStoreAttachmentParams) WithContext(ctx context.Context) *PoolDataServiceStoreAttachmentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the pool data service store attachment params
func (o *PoolDataServiceStoreAttachmentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the pool data service store attachment params
func (o *PoolDataServiceStoreAttachmentParams) WithHTTPClient(client *http.Client) *PoolDataServiceStoreAttachmentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the pool data service store attachment params
func (o *PoolDataServiceStoreAttachmentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAttname adds the attname to the pool data service store attachment params
func (o *PoolDataServiceStoreAttachmentParams) WithAttname(attname string) *PoolDataServiceStoreAttachmentParams {
	o.SetAttname(attname)
	return o
}

// SetAttname adds the attname to the pool data service store attachment params
func (o *PoolDataServiceStoreAttachmentParams) SetAttname(attname string) {
	o.Attname = attname
}

// WithID adds the id to the pool data service store attachment params
func (o *PoolDataServiceStoreAttachmentParams) WithID(id string) *PoolDataServiceStoreAttachmentParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the pool data service store attachment params
func (o *PoolDataServiceStoreAttachmentParams) SetID(id string) {
	o.ID = id
}

// WithPoolID adds the poolID to the pool data service store attachment params
func (o *PoolDataServiceStoreAttachmentParams) WithPoolID(poolID string) *PoolDataServiceStoreAttachmentParams {
	o.SetPoolID(poolID)
	return o
}

// SetPoolID adds the poolId to the pool data service store attachment params
func (o *PoolDataServiceStoreAttachmentParams) SetPoolID(poolID string) {
	o.PoolID = poolID
}

// WithUpfile adds the upfile to the pool data service store attachment params
func (o *PoolDataServiceStoreAttachmentParams) WithUpfile(upfile runtime.NamedReadCloser) *PoolDataServiceStoreAttachmentParams {
	o.SetUpfile(upfile)
	return o
}

// SetUpfile adds the upfile to the pool data service store attachment params
func (o *PoolDataServiceStoreAttachmentParams) SetUpfile(upfile runtime.NamedReadCloser) {
	o.Upfile = upfile
}

// WriteToRequest writes these params to a swagger request
func (o *PoolDataServiceStoreAttachmentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param attname
	if err := r.SetPathParam("attname", o.Attname); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// path param poolId
	if err := r.SetPathParam("poolId", o.PoolID); err != nil {
		return err
	}
	// form file param upfile
	if err := r.SetFileParam("upfile", o.Upfile); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
