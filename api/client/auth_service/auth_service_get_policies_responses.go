// Code generated by go-swagger; DO NOT EDIT.

package auth_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zestlabs-io/zest-go-sdk/api/models"
)

// AuthServiceGetPoliciesReader is a Reader for the AuthServiceGetPolicies structure.
type AuthServiceGetPoliciesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AuthServiceGetPoliciesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAuthServiceGetPoliciesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewAuthServiceGetPoliciesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewAuthServiceGetPoliciesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAuthServiceGetPoliciesOK creates a AuthServiceGetPoliciesOK with default headers values
func NewAuthServiceGetPoliciesOK() *AuthServiceGetPoliciesOK {
	return &AuthServiceGetPoliciesOK{}
}

/*AuthServiceGetPoliciesOK handles this case with default header values.

A successful response.
*/
type AuthServiceGetPoliciesOK struct {
	Payload *models.V1GetPoliciesResponse
}

func (o *AuthServiceGetPoliciesOK) Error() string {
	return fmt.Sprintf("[GET /api/auth/v1/policies][%d] authServiceGetPoliciesOK  %+v", 200, o.Payload)
}

func (o *AuthServiceGetPoliciesOK) GetPayload() *models.V1GetPoliciesResponse {
	return o.Payload
}

func (o *AuthServiceGetPoliciesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1GetPoliciesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthServiceGetPoliciesNotFound creates a AuthServiceGetPoliciesNotFound with default headers values
func NewAuthServiceGetPoliciesNotFound() *AuthServiceGetPoliciesNotFound {
	return &AuthServiceGetPoliciesNotFound{}
}

/*AuthServiceGetPoliciesNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type AuthServiceGetPoliciesNotFound struct {
	Payload string
}

func (o *AuthServiceGetPoliciesNotFound) Error() string {
	return fmt.Sprintf("[GET /api/auth/v1/policies][%d] authServiceGetPoliciesNotFound  %+v", 404, o.Payload)
}

func (o *AuthServiceGetPoliciesNotFound) GetPayload() string {
	return o.Payload
}

func (o *AuthServiceGetPoliciesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthServiceGetPoliciesDefault creates a AuthServiceGetPoliciesDefault with default headers values
func NewAuthServiceGetPoliciesDefault(code int) *AuthServiceGetPoliciesDefault {
	return &AuthServiceGetPoliciesDefault{
		_statusCode: code,
	}
}

/*AuthServiceGetPoliciesDefault handles this case with default header values.

An unexpected error response
*/
type AuthServiceGetPoliciesDefault struct {
	_statusCode int

	Payload *models.RuntimeError
}

// Code gets the status code for the auth service get policies default response
func (o *AuthServiceGetPoliciesDefault) Code() int {
	return o._statusCode
}

func (o *AuthServiceGetPoliciesDefault) Error() string {
	return fmt.Sprintf("[GET /api/auth/v1/policies][%d] AuthService_GetPolicies default  %+v", o._statusCode, o.Payload)
}

func (o *AuthServiceGetPoliciesDefault) GetPayload() *models.RuntimeError {
	return o.Payload
}

func (o *AuthServiceGetPoliciesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
