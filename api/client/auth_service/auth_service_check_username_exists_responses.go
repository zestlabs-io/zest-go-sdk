// Code generated by go-swagger; DO NOT EDIT.

package auth_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zestlabs-io/zest-go-sdk/api/models"
)

// AuthServiceCheckUsernameExistsReader is a Reader for the AuthServiceCheckUsernameExists structure.
type AuthServiceCheckUsernameExistsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AuthServiceCheckUsernameExistsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAuthServiceCheckUsernameExistsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAuthServiceCheckUsernameExistsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAuthServiceCheckUsernameExistsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAuthServiceCheckUsernameExistsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewAuthServiceCheckUsernameExistsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAuthServiceCheckUsernameExistsOK creates a AuthServiceCheckUsernameExistsOK with default headers values
func NewAuthServiceCheckUsernameExistsOK() *AuthServiceCheckUsernameExistsOK {
	return &AuthServiceCheckUsernameExistsOK{}
}

/* AuthServiceCheckUsernameExistsOK describes a response with status code 200, with default header values.

Returned when check was performed successfuly.
*/
type AuthServiceCheckUsernameExistsOK struct {
	Payload *models.V1CheckUsernameExistsResponse
}

func (o *AuthServiceCheckUsernameExistsOK) Error() string {
	return fmt.Sprintf("[POST /api/auth/v1/check-username-exists][%d] authServiceCheckUsernameExistsOK  %+v", 200, o.Payload)
}
func (o *AuthServiceCheckUsernameExistsOK) GetPayload() *models.V1CheckUsernameExistsResponse {
	return o.Payload
}

func (o *AuthServiceCheckUsernameExistsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1CheckUsernameExistsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthServiceCheckUsernameExistsForbidden creates a AuthServiceCheckUsernameExistsForbidden with default headers values
func NewAuthServiceCheckUsernameExistsForbidden() *AuthServiceCheckUsernameExistsForbidden {
	return &AuthServiceCheckUsernameExistsForbidden{}
}

/* AuthServiceCheckUsernameExistsForbidden describes a response with status code 403, with default header values.

Returned when the caller is not allowed to perform this call.
*/
type AuthServiceCheckUsernameExistsForbidden struct {
	Payload interface{}
}

func (o *AuthServiceCheckUsernameExistsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/auth/v1/check-username-exists][%d] authServiceCheckUsernameExistsForbidden  %+v", 403, o.Payload)
}
func (o *AuthServiceCheckUsernameExistsForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *AuthServiceCheckUsernameExistsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthServiceCheckUsernameExistsNotFound creates a AuthServiceCheckUsernameExistsNotFound with default headers values
func NewAuthServiceCheckUsernameExistsNotFound() *AuthServiceCheckUsernameExistsNotFound {
	return &AuthServiceCheckUsernameExistsNotFound{}
}

/* AuthServiceCheckUsernameExistsNotFound describes a response with status code 404, with default header values.

Returned when the resource does not exist.
*/
type AuthServiceCheckUsernameExistsNotFound struct {
	Payload string
}

func (o *AuthServiceCheckUsernameExistsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/auth/v1/check-username-exists][%d] authServiceCheckUsernameExistsNotFound  %+v", 404, o.Payload)
}
func (o *AuthServiceCheckUsernameExistsNotFound) GetPayload() string {
	return o.Payload
}

func (o *AuthServiceCheckUsernameExistsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthServiceCheckUsernameExistsInternalServerError creates a AuthServiceCheckUsernameExistsInternalServerError with default headers values
func NewAuthServiceCheckUsernameExistsInternalServerError() *AuthServiceCheckUsernameExistsInternalServerError {
	return &AuthServiceCheckUsernameExistsInternalServerError{}
}

/* AuthServiceCheckUsernameExistsInternalServerError describes a response with status code 500, with default header values.

Returned whenever an internall error occurs.
*/
type AuthServiceCheckUsernameExistsInternalServerError struct {
	Payload interface{}
}

func (o *AuthServiceCheckUsernameExistsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/auth/v1/check-username-exists][%d] authServiceCheckUsernameExistsInternalServerError  %+v", 500, o.Payload)
}
func (o *AuthServiceCheckUsernameExistsInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *AuthServiceCheckUsernameExistsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthServiceCheckUsernameExistsDefault creates a AuthServiceCheckUsernameExistsDefault with default headers values
func NewAuthServiceCheckUsernameExistsDefault(code int) *AuthServiceCheckUsernameExistsDefault {
	return &AuthServiceCheckUsernameExistsDefault{
		_statusCode: code,
	}
}

/* AuthServiceCheckUsernameExistsDefault describes a response with status code -1, with default header values.

An unexpected error response
*/
type AuthServiceCheckUsernameExistsDefault struct {
	_statusCode int

	Payload *models.RuntimeError
}

// Code gets the status code for the auth service check username exists default response
func (o *AuthServiceCheckUsernameExistsDefault) Code() int {
	return o._statusCode
}

func (o *AuthServiceCheckUsernameExistsDefault) Error() string {
	return fmt.Sprintf("[POST /api/auth/v1/check-username-exists][%d] AuthService_CheckUsernameExists default  %+v", o._statusCode, o.Payload)
}
func (o *AuthServiceCheckUsernameExistsDefault) GetPayload() *models.RuntimeError {
	return o.Payload
}

func (o *AuthServiceCheckUsernameExistsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
