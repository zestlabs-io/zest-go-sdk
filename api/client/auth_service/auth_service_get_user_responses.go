// Code generated by go-swagger; DO NOT EDIT.

package auth_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zestlabs-io/zest-go-sdk/api/models"
)

// AuthServiceGetUserReader is a Reader for the AuthServiceGetUser structure.
type AuthServiceGetUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AuthServiceGetUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAuthServiceGetUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewAuthServiceGetUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewAuthServiceGetUserDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAuthServiceGetUserOK creates a AuthServiceGetUserOK with default headers values
func NewAuthServiceGetUserOK() *AuthServiceGetUserOK {
	return &AuthServiceGetUserOK{}
}

/* AuthServiceGetUserOK describes a response with status code 200, with default header values.

A successful response.
*/
type AuthServiceGetUserOK struct {
	Payload *models.V1GetUserResponse
}

func (o *AuthServiceGetUserOK) Error() string {
	return fmt.Sprintf("[GET /api/auth/v1/user/{userID}][%d] authServiceGetUserOK  %+v", 200, o.Payload)
}
func (o *AuthServiceGetUserOK) GetPayload() *models.V1GetUserResponse {
	return o.Payload
}

func (o *AuthServiceGetUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1GetUserResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthServiceGetUserNotFound creates a AuthServiceGetUserNotFound with default headers values
func NewAuthServiceGetUserNotFound() *AuthServiceGetUserNotFound {
	return &AuthServiceGetUserNotFound{}
}

/* AuthServiceGetUserNotFound describes a response with status code 404, with default header values.

Returned when the resource does not exist.
*/
type AuthServiceGetUserNotFound struct {
	Payload string
}

func (o *AuthServiceGetUserNotFound) Error() string {
	return fmt.Sprintf("[GET /api/auth/v1/user/{userID}][%d] authServiceGetUserNotFound  %+v", 404, o.Payload)
}
func (o *AuthServiceGetUserNotFound) GetPayload() string {
	return o.Payload
}

func (o *AuthServiceGetUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthServiceGetUserDefault creates a AuthServiceGetUserDefault with default headers values
func NewAuthServiceGetUserDefault(code int) *AuthServiceGetUserDefault {
	return &AuthServiceGetUserDefault{
		_statusCode: code,
	}
}

/* AuthServiceGetUserDefault describes a response with status code -1, with default header values.

An unexpected error response
*/
type AuthServiceGetUserDefault struct {
	_statusCode int

	Payload *models.RuntimeError
}

// Code gets the status code for the auth service get user default response
func (o *AuthServiceGetUserDefault) Code() int {
	return o._statusCode
}

func (o *AuthServiceGetUserDefault) Error() string {
	return fmt.Sprintf("[GET /api/auth/v1/user/{userID}][%d] AuthService_GetUser default  %+v", o._statusCode, o.Payload)
}
func (o *AuthServiceGetUserDefault) GetPayload() *models.RuntimeError {
	return o.Payload
}

func (o *AuthServiceGetUserDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
