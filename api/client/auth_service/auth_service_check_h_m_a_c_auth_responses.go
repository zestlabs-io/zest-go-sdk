// Code generated by go-swagger; DO NOT EDIT.

package auth_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zestlabs-io/zest-go-sdk/api/models"
)

// AuthServiceCheckHMACAuthReader is a Reader for the AuthServiceCheckHMACAuth structure.
type AuthServiceCheckHMACAuthReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AuthServiceCheckHMACAuthReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAuthServiceCheckHMACAuthOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewAuthServiceCheckHMACAuthNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewAuthServiceCheckHMACAuthDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAuthServiceCheckHMACAuthOK creates a AuthServiceCheckHMACAuthOK with default headers values
func NewAuthServiceCheckHMACAuthOK() *AuthServiceCheckHMACAuthOK {
	return &AuthServiceCheckHMACAuthOK{}
}

/*AuthServiceCheckHMACAuthOK handles this case with default header values.

A successful response.
*/
type AuthServiceCheckHMACAuthOK struct {
	Payload *models.V1CheckHMACAuthResponse
}

func (o *AuthServiceCheckHMACAuthOK) Error() string {
	return fmt.Sprintf("[POST /api/auth/v1/check-hmac][%d] authServiceCheckHMACAuthOK  %+v", 200, o.Payload)
}

func (o *AuthServiceCheckHMACAuthOK) GetPayload() *models.V1CheckHMACAuthResponse {
	return o.Payload
}

func (o *AuthServiceCheckHMACAuthOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1CheckHMACAuthResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthServiceCheckHMACAuthNotFound creates a AuthServiceCheckHMACAuthNotFound with default headers values
func NewAuthServiceCheckHMACAuthNotFound() *AuthServiceCheckHMACAuthNotFound {
	return &AuthServiceCheckHMACAuthNotFound{}
}

/*AuthServiceCheckHMACAuthNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type AuthServiceCheckHMACAuthNotFound struct {
	Payload string
}

func (o *AuthServiceCheckHMACAuthNotFound) Error() string {
	return fmt.Sprintf("[POST /api/auth/v1/check-hmac][%d] authServiceCheckHMACAuthNotFound  %+v", 404, o.Payload)
}

func (o *AuthServiceCheckHMACAuthNotFound) GetPayload() string {
	return o.Payload
}

func (o *AuthServiceCheckHMACAuthNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthServiceCheckHMACAuthDefault creates a AuthServiceCheckHMACAuthDefault with default headers values
func NewAuthServiceCheckHMACAuthDefault(code int) *AuthServiceCheckHMACAuthDefault {
	return &AuthServiceCheckHMACAuthDefault{
		_statusCode: code,
	}
}

/*AuthServiceCheckHMACAuthDefault handles this case with default header values.

An unexpected error response
*/
type AuthServiceCheckHMACAuthDefault struct {
	_statusCode int

	Payload *models.RuntimeError
}

// Code gets the status code for the auth service check h m a c auth default response
func (o *AuthServiceCheckHMACAuthDefault) Code() int {
	return o._statusCode
}

func (o *AuthServiceCheckHMACAuthDefault) Error() string {
	return fmt.Sprintf("[POST /api/auth/v1/check-hmac][%d] AuthService_CheckHMACAuth default  %+v", o._statusCode, o.Payload)
}

func (o *AuthServiceCheckHMACAuthDefault) GetPayload() *models.RuntimeError {
	return o.Payload
}

func (o *AuthServiceCheckHMACAuthDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
