// Code generated by go-swagger; DO NOT EDIT.

package auth_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zestlabs-io/zest-go-sdk/api/models"
)

// AuthServiceCreateClientReader is a Reader for the AuthServiceCreateClient structure.
type AuthServiceCreateClientReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AuthServiceCreateClientReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAuthServiceCreateClientOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAuthServiceCreateClientBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAuthServiceCreateClientForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAuthServiceCreateClientNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAuthServiceCreateClientInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewAuthServiceCreateClientDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAuthServiceCreateClientOK creates a AuthServiceCreateClientOK with default headers values
func NewAuthServiceCreateClientOK() *AuthServiceCreateClientOK {
	return &AuthServiceCreateClientOK{}
}

/*AuthServiceCreateClientOK handles this case with default header values.

A successful response.
*/
type AuthServiceCreateClientOK struct {
	Payload *models.V1CreateClientResponse
}

func (o *AuthServiceCreateClientOK) Error() string {
	return fmt.Sprintf("[POST /api/auth/v1/client][%d] authServiceCreateClientOK  %+v", 200, o.Payload)
}

func (o *AuthServiceCreateClientOK) GetPayload() *models.V1CreateClientResponse {
	return o.Payload
}

func (o *AuthServiceCreateClientOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1CreateClientResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthServiceCreateClientBadRequest creates a AuthServiceCreateClientBadRequest with default headers values
func NewAuthServiceCreateClientBadRequest() *AuthServiceCreateClientBadRequest {
	return &AuthServiceCreateClientBadRequest{}
}

/*AuthServiceCreateClientBadRequest handles this case with default header values.

Returned when no valid client ID is provided in the request, or the account has already has 20 clients.
*/
type AuthServiceCreateClientBadRequest struct {
	Payload interface{}
}

func (o *AuthServiceCreateClientBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/auth/v1/client][%d] authServiceCreateClientBadRequest  %+v", 400, o.Payload)
}

func (o *AuthServiceCreateClientBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *AuthServiceCreateClientBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthServiceCreateClientForbidden creates a AuthServiceCreateClientForbidden with default headers values
func NewAuthServiceCreateClientForbidden() *AuthServiceCreateClientForbidden {
	return &AuthServiceCreateClientForbidden{}
}

/*AuthServiceCreateClientForbidden handles this case with default header values.

Returned when the caller is not allowed to perform this call.
*/
type AuthServiceCreateClientForbidden struct {
	Payload interface{}
}

func (o *AuthServiceCreateClientForbidden) Error() string {
	return fmt.Sprintf("[POST /api/auth/v1/client][%d] authServiceCreateClientForbidden  %+v", 403, o.Payload)
}

func (o *AuthServiceCreateClientForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *AuthServiceCreateClientForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthServiceCreateClientNotFound creates a AuthServiceCreateClientNotFound with default headers values
func NewAuthServiceCreateClientNotFound() *AuthServiceCreateClientNotFound {
	return &AuthServiceCreateClientNotFound{}
}

/*AuthServiceCreateClientNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type AuthServiceCreateClientNotFound struct {
	Payload string
}

func (o *AuthServiceCreateClientNotFound) Error() string {
	return fmt.Sprintf("[POST /api/auth/v1/client][%d] authServiceCreateClientNotFound  %+v", 404, o.Payload)
}

func (o *AuthServiceCreateClientNotFound) GetPayload() string {
	return o.Payload
}

func (o *AuthServiceCreateClientNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthServiceCreateClientInternalServerError creates a AuthServiceCreateClientInternalServerError with default headers values
func NewAuthServiceCreateClientInternalServerError() *AuthServiceCreateClientInternalServerError {
	return &AuthServiceCreateClientInternalServerError{}
}

/*AuthServiceCreateClientInternalServerError handles this case with default header values.

Returned whenever an internall error occurs.
*/
type AuthServiceCreateClientInternalServerError struct {
	Payload interface{}
}

func (o *AuthServiceCreateClientInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/auth/v1/client][%d] authServiceCreateClientInternalServerError  %+v", 500, o.Payload)
}

func (o *AuthServiceCreateClientInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *AuthServiceCreateClientInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthServiceCreateClientDefault creates a AuthServiceCreateClientDefault with default headers values
func NewAuthServiceCreateClientDefault(code int) *AuthServiceCreateClientDefault {
	return &AuthServiceCreateClientDefault{
		_statusCode: code,
	}
}

/*AuthServiceCreateClientDefault handles this case with default header values.

An unexpected error response
*/
type AuthServiceCreateClientDefault struct {
	_statusCode int

	Payload *models.RuntimeError
}

// Code gets the status code for the auth service create client default response
func (o *AuthServiceCreateClientDefault) Code() int {
	return o._statusCode
}

func (o *AuthServiceCreateClientDefault) Error() string {
	return fmt.Sprintf("[POST /api/auth/v1/client][%d] AuthService_CreateClient default  %+v", o._statusCode, o.Payload)
}

func (o *AuthServiceCreateClientDefault) GetPayload() *models.RuntimeError {
	return o.Payload
}

func (o *AuthServiceCreateClientDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
