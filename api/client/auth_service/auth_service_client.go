// Code generated by go-swagger; DO NOT EDIT.

package auth_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new auth service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for auth service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AuthServiceAddPoliciesToRole(params *AuthServiceAddPoliciesToRoleParams) (*AuthServiceAddPoliciesToRoleOK, error)

	AuthServiceAddPoliciesToUser(params *AuthServiceAddPoliciesToUserParams) (*AuthServiceAddPoliciesToUserOK, error)

	AuthServiceAddUsersToRole(params *AuthServiceAddUsersToRoleParams) (*AuthServiceAddUsersToRoleOK, error)

	AuthServiceCheckHMACAuth(params *AuthServiceCheckHMACAuthParams) (*AuthServiceCheckHMACAuthOK, error)

	AuthServiceCheckTokenAuth(params *AuthServiceCheckTokenAuthParams) (*AuthServiceCheckTokenAuthOK, error)

	AuthServiceCreateAccessKey(params *AuthServiceCreateAccessKeyParams) (*AuthServiceCreateAccessKeyOK, error)

	AuthServiceCreateClient(params *AuthServiceCreateClientParams) (*AuthServiceCreateClientOK, error)

	AuthServiceCreatePolicy(params *AuthServiceCreatePolicyParams) (*AuthServiceCreatePolicyOK, error)

	AuthServiceCreateRole(params *AuthServiceCreateRoleParams) (*AuthServiceCreateRoleOK, error)

	AuthServiceCreateUser(params *AuthServiceCreateUserParams) (*AuthServiceCreateUserOK, error)

	AuthServiceDeleteAccessKey(params *AuthServiceDeleteAccessKeyParams) (*AuthServiceDeleteAccessKeyOK, error)

	AuthServiceDeleteClient(params *AuthServiceDeleteClientParams) (*AuthServiceDeleteClientOK, error)

	AuthServiceDeletePolicy(params *AuthServiceDeletePolicyParams) (*AuthServiceDeletePolicyOK, error)

	AuthServiceDeleteRole(params *AuthServiceDeleteRoleParams) (*AuthServiceDeleteRoleOK, error)

	AuthServiceDeleteUser(params *AuthServiceDeleteUserParams) (*AuthServiceDeleteUserOK, error)

	AuthServiceGetClients(params *AuthServiceGetClientsParams) (*AuthServiceGetClientsOK, error)

	AuthServiceGetDefaultPolicies(params *AuthServiceGetDefaultPoliciesParams) (*AuthServiceGetDefaultPoliciesOK, error)

	AuthServiceGetOwnAccount(params *AuthServiceGetOwnAccountParams) (*AuthServiceGetOwnAccountOK, error)

	AuthServiceGetPasswordPolicy(params *AuthServiceGetPasswordPolicyParams) (*AuthServiceGetPasswordPolicyOK, error)

	AuthServiceGetPolicies(params *AuthServiceGetPoliciesParams) (*AuthServiceGetPoliciesOK, error)

	AuthServiceGetPolicy(params *AuthServiceGetPolicyParams) (*AuthServiceGetPolicyOK, error)

	AuthServiceGetRole(params *AuthServiceGetRoleParams) (*AuthServiceGetRoleOK, error)

	AuthServiceGetRoles(params *AuthServiceGetRolesParams) (*AuthServiceGetRolesOK, error)

	AuthServiceGetUser(params *AuthServiceGetUserParams) (*AuthServiceGetUserOK, error)

	AuthServiceGetUserAccessKeys(params *AuthServiceGetUserAccessKeysParams) (*AuthServiceGetUserAccessKeysOK, error)

	AuthServiceGetUserIDByEmail(params *AuthServiceGetUserIDByEmailParams) (*AuthServiceGetUserIDByEmailOK, error)

	AuthServiceGetUserInfo(params *AuthServiceGetUserInfoParams) (*AuthServiceGetUserInfoOK, error)

	AuthServiceGetUsers(params *AuthServiceGetUsersParams) (*AuthServiceGetUsersOK, error)

	AuthServiceGetUsersForRole(params *AuthServiceGetUsersForRoleParams) (*AuthServiceGetUsersForRoleOK, error)

	AuthServiceRemovePoliciesFromRole(params *AuthServiceRemovePoliciesFromRoleParams) (*AuthServiceRemovePoliciesFromRoleOK, error)

	AuthServiceRemovePoliciesFromUser(params *AuthServiceRemovePoliciesFromUserParams) (*AuthServiceRemovePoliciesFromUserOK, error)

	AuthServiceRemoveUsersFromRole(params *AuthServiceRemoveUsersFromRoleParams) (*AuthServiceRemoveUsersFromRoleOK, error)

	AuthServiceResetPassword(params *AuthServiceResetPasswordParams) (*AuthServiceResetPasswordOK, error)

	AuthServiceSetPassword(params *AuthServiceSetPasswordParams) (*AuthServiceSetPasswordOK, error)

	AuthServiceUpdateAccount(params *AuthServiceUpdateAccountParams) (*AuthServiceUpdateAccountOK, error)

	AuthServiceUpdateClient(params *AuthServiceUpdateClientParams) (*AuthServiceUpdateClientOK, error)

	AuthServiceUpdatePolicy(params *AuthServiceUpdatePolicyParams) (*AuthServiceUpdatePolicyOK, error)

	AuthServiceUpdateRole(params *AuthServiceUpdateRoleParams) (*AuthServiceUpdateRoleOK, error)

	AuthServiceUpdateUser(params *AuthServiceUpdateUserParams) (*AuthServiceUpdateUserOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AuthServiceAddPoliciesToRole auth service add policies to role API
*/
func (a *Client) AuthServiceAddPoliciesToRole(params *AuthServiceAddPoliciesToRoleParams) (*AuthServiceAddPoliciesToRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceAddPoliciesToRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_AddPoliciesToRole",
		Method:             "POST",
		PathPattern:        "/api/auth/v1/role/policies/add",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceAddPoliciesToRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceAddPoliciesToRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceAddPoliciesToRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceAddPoliciesToUser auth service add policies to user API
*/
func (a *Client) AuthServiceAddPoliciesToUser(params *AuthServiceAddPoliciesToUserParams) (*AuthServiceAddPoliciesToUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceAddPoliciesToUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_AddPoliciesToUser",
		Method:             "POST",
		PathPattern:        "/api/auth/v1/user/policies/add",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceAddPoliciesToUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceAddPoliciesToUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceAddPoliciesToUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceAddUsersToRole auth service add users to role API
*/
func (a *Client) AuthServiceAddUsersToRole(params *AuthServiceAddUsersToRoleParams) (*AuthServiceAddUsersToRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceAddUsersToRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_AddUsersToRole",
		Method:             "POST",
		PathPattern:        "/api/auth/v1/role/users/add",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceAddUsersToRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceAddUsersToRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceAddUsersToRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceCheckHMACAuth auths API
*/
func (a *Client) AuthServiceCheckHMACAuth(params *AuthServiceCheckHMACAuthParams) (*AuthServiceCheckHMACAuthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceCheckHMACAuthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_CheckHMACAuth",
		Method:             "POST",
		PathPattern:        "/api/auth/v1/check-hmac",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceCheckHMACAuthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceCheckHMACAuthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceCheckHMACAuthDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceCheckTokenAuth auth service check token auth API
*/
func (a *Client) AuthServiceCheckTokenAuth(params *AuthServiceCheckTokenAuthParams) (*AuthServiceCheckTokenAuthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceCheckTokenAuthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_CheckTokenAuth",
		Method:             "POST",
		PathPattern:        "/api/auth/v1/check-token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceCheckTokenAuthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceCheckTokenAuthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceCheckTokenAuthDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceCreateAccessKey users access keys API
*/
func (a *Client) AuthServiceCreateAccessKey(params *AuthServiceCreateAccessKeyParams) (*AuthServiceCreateAccessKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceCreateAccessKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_CreateAccessKey",
		Method:             "POST",
		PathPattern:        "/api/auth/v1/accesskey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceCreateAccessKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceCreateAccessKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceCreateAccessKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceCreateClient creates client will try to create a new oidc client for the account with the account ID concatenated with suffix provided in the request if the client already exists or there are already 20 clients an error will be returned

  Authorisation requirements:
		Service:		`auth`
		Call:				`CreateClient`
		Scope:
*/
func (a *Client) AuthServiceCreateClient(params *AuthServiceCreateClientParams) (*AuthServiceCreateClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceCreateClientParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_CreateClient",
		Method:             "POST",
		PathPattern:        "/api/auth/v1/client",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceCreateClientReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceCreateClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceCreateClientDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceCreatePolicy auth service create policy API
*/
func (a *Client) AuthServiceCreatePolicy(params *AuthServiceCreatePolicyParams) (*AuthServiceCreatePolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceCreatePolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_CreatePolicy",
		Method:             "POST",
		PathPattern:        "/api/auth/v1/policy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceCreatePolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceCreatePolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceCreatePolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceCreateRole auth service create role API
*/
func (a *Client) AuthServiceCreateRole(params *AuthServiceCreateRoleParams) (*AuthServiceCreateRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceCreateRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_CreateRole",
		Method:             "POST",
		PathPattern:        "/api/auth/v1/role",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceCreateRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceCreateRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceCreateRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceCreateUser auth service create user API
*/
func (a *Client) AuthServiceCreateUser(params *AuthServiceCreateUserParams) (*AuthServiceCreateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceCreateUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_CreateUser",
		Method:             "POST",
		PathPattern:        "/api/auth/v1/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceCreateUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceCreateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceCreateUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceDeleteAccessKey auth service delete access key API
*/
func (a *Client) AuthServiceDeleteAccessKey(params *AuthServiceDeleteAccessKeyParams) (*AuthServiceDeleteAccessKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceDeleteAccessKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_DeleteAccessKey",
		Method:             "DELETE",
		PathPattern:        "/api/auth/v1/accesskey/{accessKeyID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceDeleteAccessKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceDeleteAccessKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceDeleteAccessKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceDeleteClient deletes client will delete the client with the provided ID and return an error if a key with this ID does not exist or is not part of accounts clients

  Authorisation requirements:
		Service:		`auth`
		Call:				`DeleteClient`
		Scope:			client ID
*/
func (a *Client) AuthServiceDeleteClient(params *AuthServiceDeleteClientParams) (*AuthServiceDeleteClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceDeleteClientParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_DeleteClient",
		Method:             "DELETE",
		PathPattern:        "/api/auth/v1/client/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceDeleteClientReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceDeleteClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceDeleteClientDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceDeletePolicy auth service delete policy API
*/
func (a *Client) AuthServiceDeletePolicy(params *AuthServiceDeletePolicyParams) (*AuthServiceDeletePolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceDeletePolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_DeletePolicy",
		Method:             "DELETE",
		PathPattern:        "/api/auth/v1/policy/{policyID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceDeletePolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceDeletePolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceDeletePolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceDeleteRole auth service delete role API
*/
func (a *Client) AuthServiceDeleteRole(params *AuthServiceDeleteRoleParams) (*AuthServiceDeleteRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceDeleteRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_DeleteRole",
		Method:             "DELETE",
		PathPattern:        "/api/auth/v1/role/{roleID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceDeleteRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceDeleteRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceDeleteRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceDeleteUser auth service delete user API
*/
func (a *Client) AuthServiceDeleteUser(params *AuthServiceDeleteUserParams) (*AuthServiceDeleteUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceDeleteUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_DeleteUser",
		Method:             "DELETE",
		PathPattern:        "/api/auth/v1/user/{userID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceDeleteUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceDeleteUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceDeleteUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceGetClients gets clients loads all clients for account

  Authorisation requirements:
		Service:		`auth`
		Call:				`GetClients`
		Scope:			``
*/
func (a *Client) AuthServiceGetClients(params *AuthServiceGetClientsParams) (*AuthServiceGetClientsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceGetClientsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_GetClients",
		Method:             "GET",
		PathPattern:        "/api/auth/v1/clients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceGetClientsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceGetClientsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceGetClientsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceGetDefaultPolicies auth service get default policies API
*/
func (a *Client) AuthServiceGetDefaultPolicies(params *AuthServiceGetDefaultPoliciesParams) (*AuthServiceGetDefaultPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceGetDefaultPoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_GetDefaultPolicies",
		Method:             "GET",
		PathPattern:        "/api/auth/v1/default-policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceGetDefaultPoliciesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceGetDefaultPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceGetDefaultPoliciesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceGetOwnAccount auth service get own account API
*/
func (a *Client) AuthServiceGetOwnAccount(params *AuthServiceGetOwnAccountParams) (*AuthServiceGetOwnAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceGetOwnAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_GetOwnAccount",
		Method:             "GET",
		PathPattern:        "/api/auth/v1/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceGetOwnAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceGetOwnAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceGetOwnAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceGetPasswordPolicy auth service get password policy API
*/
func (a *Client) AuthServiceGetPasswordPolicy(params *AuthServiceGetPasswordPolicyParams) (*AuthServiceGetPasswordPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceGetPasswordPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_GetPasswordPolicy",
		Method:             "GET",
		PathPattern:        "/api/auth/v1/password-policy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceGetPasswordPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceGetPasswordPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceGetPasswordPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceGetPolicies auth service get policies API
*/
func (a *Client) AuthServiceGetPolicies(params *AuthServiceGetPoliciesParams) (*AuthServiceGetPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceGetPoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_GetPolicies",
		Method:             "GET",
		PathPattern:        "/api/auth/v1/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceGetPoliciesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceGetPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceGetPoliciesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceGetPolicy rs b a c API
*/
func (a *Client) AuthServiceGetPolicy(params *AuthServiceGetPolicyParams) (*AuthServiceGetPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceGetPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_GetPolicy",
		Method:             "GET",
		PathPattern:        "/api/auth/v1/policy/{policyID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceGetPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceGetPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceGetPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceGetRole auth service get role API
*/
func (a *Client) AuthServiceGetRole(params *AuthServiceGetRoleParams) (*AuthServiceGetRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceGetRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_GetRole",
		Method:             "GET",
		PathPattern:        "/api/auth/v1/role/{roleID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceGetRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceGetRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceGetRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceGetRoles auth service get roles API
*/
func (a *Client) AuthServiceGetRoles(params *AuthServiceGetRolesParams) (*AuthServiceGetRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceGetRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_GetRoles",
		Method:             "GET",
		PathPattern:        "/api/auth/v1/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceGetRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceGetRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceGetRolesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceGetUser auth service get user API
*/
func (a *Client) AuthServiceGetUser(params *AuthServiceGetUserParams) (*AuthServiceGetUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceGetUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_GetUser",
		Method:             "GET",
		PathPattern:        "/api/auth/v1/user/{userID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceGetUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceGetUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceGetUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceGetUserAccessKeys auth service get user access keys API
*/
func (a *Client) AuthServiceGetUserAccessKeys(params *AuthServiceGetUserAccessKeysParams) (*AuthServiceGetUserAccessKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceGetUserAccessKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_GetUserAccessKeys",
		Method:             "GET",
		PathPattern:        "/api/auth/v1/user/accesskeys/{userID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceGetUserAccessKeysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceGetUserAccessKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceGetUserAccessKeysDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceGetUserIDByEmail auth service get user ID by email API
*/
func (a *Client) AuthServiceGetUserIDByEmail(params *AuthServiceGetUserIDByEmailParams) (*AuthServiceGetUserIDByEmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceGetUserIDByEmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_GetUserIDByEmail",
		Method:             "GET",
		PathPattern:        "/api/auth/v1/user-id-by-email/{email}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceGetUserIDByEmailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceGetUserIDByEmailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceGetUserIDByEmailDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceGetUserInfo users API
*/
func (a *Client) AuthServiceGetUserInfo(params *AuthServiceGetUserInfoParams) (*AuthServiceGetUserInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceGetUserInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_GetUserInfo",
		Method:             "GET",
		PathPattern:        "/api/auth/v1/userinfo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceGetUserInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceGetUserInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceGetUserInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceGetUsers auth service get users API
*/
func (a *Client) AuthServiceGetUsers(params *AuthServiceGetUsersParams) (*AuthServiceGetUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceGetUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_GetUsers",
		Method:             "GET",
		PathPattern:        "/api/auth/v1/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceGetUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceGetUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceGetUsersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceGetUsersForRole auth service get users for role API
*/
func (a *Client) AuthServiceGetUsersForRole(params *AuthServiceGetUsersForRoleParams) (*AuthServiceGetUsersForRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceGetUsersForRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_GetUsersForRole",
		Method:             "GET",
		PathPattern:        "/api/auth/v1/role/users/{roleID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceGetUsersForRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceGetUsersForRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceGetUsersForRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceRemovePoliciesFromRole auth service remove policies from role API
*/
func (a *Client) AuthServiceRemovePoliciesFromRole(params *AuthServiceRemovePoliciesFromRoleParams) (*AuthServiceRemovePoliciesFromRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceRemovePoliciesFromRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_RemovePoliciesFromRole",
		Method:             "POST",
		PathPattern:        "/api/auth/v1/role/policies/remove",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceRemovePoliciesFromRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceRemovePoliciesFromRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceRemovePoliciesFromRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceRemovePoliciesFromUser auth service remove policies from user API
*/
func (a *Client) AuthServiceRemovePoliciesFromUser(params *AuthServiceRemovePoliciesFromUserParams) (*AuthServiceRemovePoliciesFromUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceRemovePoliciesFromUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_RemovePoliciesFromUser",
		Method:             "POST",
		PathPattern:        "/api/auth/v1/user/policies/remove",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceRemovePoliciesFromUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceRemovePoliciesFromUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceRemovePoliciesFromUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceRemoveUsersFromRole auth service remove users from role API
*/
func (a *Client) AuthServiceRemoveUsersFromRole(params *AuthServiceRemoveUsersFromRoleParams) (*AuthServiceRemoveUsersFromRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceRemoveUsersFromRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_RemoveUsersFromRole",
		Method:             "POST",
		PathPattern:        "/api/auth/v1/role/users/remove",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceRemoveUsersFromRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceRemoveUsersFromRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceRemoveUsersFromRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceResetPassword auth service reset password API
*/
func (a *Client) AuthServiceResetPassword(params *AuthServiceResetPasswordParams) (*AuthServiceResetPasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceResetPasswordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_ResetPassword",
		Method:             "POST",
		PathPattern:        "/api/auth/v1/reset-password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceResetPasswordReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceResetPasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceResetPasswordDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceSetPassword passwords API
*/
func (a *Client) AuthServiceSetPassword(params *AuthServiceSetPasswordParams) (*AuthServiceSetPasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceSetPasswordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_SetPassword",
		Method:             "POST",
		PathPattern:        "/api/auth/v1/set-password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceSetPasswordReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceSetPasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceSetPasswordDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceUpdateAccount auth service update account API
*/
func (a *Client) AuthServiceUpdateAccount(params *AuthServiceUpdateAccountParams) (*AuthServiceUpdateAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceUpdateAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_UpdateAccount",
		Method:             "PUT",
		PathPattern:        "/api/auth/v1/account/{account.accountID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceUpdateAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceUpdateAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceUpdateAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceUpdateClient updates client updates the data for account client

  Authorisation requirements:
		Service:		`auth`
		Call:				`UpdateClient`
		Scope:			`id`
*/
func (a *Client) AuthServiceUpdateClient(params *AuthServiceUpdateClientParams) (*AuthServiceUpdateClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceUpdateClientParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_UpdateClient",
		Method:             "PUT",
		PathPattern:        "/api/auth/v1/client/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceUpdateClientReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceUpdateClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceUpdateClientDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceUpdatePolicy auth service update policy API
*/
func (a *Client) AuthServiceUpdatePolicy(params *AuthServiceUpdatePolicyParams) (*AuthServiceUpdatePolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceUpdatePolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_UpdatePolicy",
		Method:             "PUT",
		PathPattern:        "/api/auth/v1/policy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceUpdatePolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceUpdatePolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceUpdatePolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceUpdateRole auth service update role API
*/
func (a *Client) AuthServiceUpdateRole(params *AuthServiceUpdateRoleParams) (*AuthServiceUpdateRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceUpdateRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_UpdateRole",
		Method:             "PUT",
		PathPattern:        "/api/auth/v1/role",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceUpdateRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceUpdateRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceUpdateRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthServiceUpdateUser auth service update user API
*/
func (a *Client) AuthServiceUpdateUser(params *AuthServiceUpdateUserParams) (*AuthServiceUpdateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthServiceUpdateUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AuthService_UpdateUser",
		Method:             "PUT",
		PathPattern:        "/api/auth/v1/user/{user.userID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthServiceUpdateUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthServiceUpdateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthServiceUpdateUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
