// Code generated by go-swagger; DO NOT EDIT.

package auth_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zestlabs-io/zest-go-sdk/api/models"
)

// AuthServiceUpdatePolicyReader is a Reader for the AuthServiceUpdatePolicy structure.
type AuthServiceUpdatePolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AuthServiceUpdatePolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAuthServiceUpdatePolicyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewAuthServiceUpdatePolicyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewAuthServiceUpdatePolicyDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAuthServiceUpdatePolicyOK creates a AuthServiceUpdatePolicyOK with default headers values
func NewAuthServiceUpdatePolicyOK() *AuthServiceUpdatePolicyOK {
	return &AuthServiceUpdatePolicyOK{}
}

/*AuthServiceUpdatePolicyOK handles this case with default header values.

A successful response.
*/
type AuthServiceUpdatePolicyOK struct {
	Payload models.V1UpdatePolicyResponse
}

func (o *AuthServiceUpdatePolicyOK) Error() string {
	return fmt.Sprintf("[PUT /api/auth/v1/policy][%d] authServiceUpdatePolicyOK  %+v", 200, o.Payload)
}

func (o *AuthServiceUpdatePolicyOK) GetPayload() models.V1UpdatePolicyResponse {
	return o.Payload
}

func (o *AuthServiceUpdatePolicyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthServiceUpdatePolicyNotFound creates a AuthServiceUpdatePolicyNotFound with default headers values
func NewAuthServiceUpdatePolicyNotFound() *AuthServiceUpdatePolicyNotFound {
	return &AuthServiceUpdatePolicyNotFound{}
}

/*AuthServiceUpdatePolicyNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type AuthServiceUpdatePolicyNotFound struct {
	Payload string
}

func (o *AuthServiceUpdatePolicyNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/auth/v1/policy][%d] authServiceUpdatePolicyNotFound  %+v", 404, o.Payload)
}

func (o *AuthServiceUpdatePolicyNotFound) GetPayload() string {
	return o.Payload
}

func (o *AuthServiceUpdatePolicyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthServiceUpdatePolicyDefault creates a AuthServiceUpdatePolicyDefault with default headers values
func NewAuthServiceUpdatePolicyDefault(code int) *AuthServiceUpdatePolicyDefault {
	return &AuthServiceUpdatePolicyDefault{
		_statusCode: code,
	}
}

/*AuthServiceUpdatePolicyDefault handles this case with default header values.

An unexpected error response
*/
type AuthServiceUpdatePolicyDefault struct {
	_statusCode int

	Payload *models.RuntimeError
}

// Code gets the status code for the auth service update policy default response
func (o *AuthServiceUpdatePolicyDefault) Code() int {
	return o._statusCode
}

func (o *AuthServiceUpdatePolicyDefault) Error() string {
	return fmt.Sprintf("[PUT /api/auth/v1/policy][%d] AuthService_UpdatePolicy default  %+v", o._statusCode, o.Payload)
}

func (o *AuthServiceUpdatePolicyDefault) GetPayload() *models.RuntimeError {
	return o.Payload
}

func (o *AuthServiceUpdatePolicyDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
