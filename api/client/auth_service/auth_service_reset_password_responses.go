// Code generated by go-swagger; DO NOT EDIT.

package auth_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zestlabs-io/zest-go-sdk/api/models"
)

// AuthServiceResetPasswordReader is a Reader for the AuthServiceResetPassword structure.
type AuthServiceResetPasswordReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AuthServiceResetPasswordReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAuthServiceResetPasswordOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewAuthServiceResetPasswordNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewAuthServiceResetPasswordDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAuthServiceResetPasswordOK creates a AuthServiceResetPasswordOK with default headers values
func NewAuthServiceResetPasswordOK() *AuthServiceResetPasswordOK {
	return &AuthServiceResetPasswordOK{}
}

/*AuthServiceResetPasswordOK handles this case with default header values.

A successful response.
*/
type AuthServiceResetPasswordOK struct {
	Payload models.V1ResetPasswordResponse
}

func (o *AuthServiceResetPasswordOK) Error() string {
	return fmt.Sprintf("[POST /api/auth/v1/reset-password][%d] authServiceResetPasswordOK  %+v", 200, o.Payload)
}

func (o *AuthServiceResetPasswordOK) GetPayload() models.V1ResetPasswordResponse {
	return o.Payload
}

func (o *AuthServiceResetPasswordOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthServiceResetPasswordNotFound creates a AuthServiceResetPasswordNotFound with default headers values
func NewAuthServiceResetPasswordNotFound() *AuthServiceResetPasswordNotFound {
	return &AuthServiceResetPasswordNotFound{}
}

/*AuthServiceResetPasswordNotFound handles this case with default header values.

Returned when the resource does not exist.
*/
type AuthServiceResetPasswordNotFound struct {
	Payload string
}

func (o *AuthServiceResetPasswordNotFound) Error() string {
	return fmt.Sprintf("[POST /api/auth/v1/reset-password][%d] authServiceResetPasswordNotFound  %+v", 404, o.Payload)
}

func (o *AuthServiceResetPasswordNotFound) GetPayload() string {
	return o.Payload
}

func (o *AuthServiceResetPasswordNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthServiceResetPasswordDefault creates a AuthServiceResetPasswordDefault with default headers values
func NewAuthServiceResetPasswordDefault(code int) *AuthServiceResetPasswordDefault {
	return &AuthServiceResetPasswordDefault{
		_statusCode: code,
	}
}

/*AuthServiceResetPasswordDefault handles this case with default header values.

An unexpected error response
*/
type AuthServiceResetPasswordDefault struct {
	_statusCode int

	Payload *models.RuntimeError
}

// Code gets the status code for the auth service reset password default response
func (o *AuthServiceResetPasswordDefault) Code() int {
	return o._statusCode
}

func (o *AuthServiceResetPasswordDefault) Error() string {
	return fmt.Sprintf("[POST /api/auth/v1/reset-password][%d] AuthService_ResetPassword default  %+v", o._statusCode, o.Payload)
}

func (o *AuthServiceResetPasswordDefault) GetPayload() *models.RuntimeError {
	return o.Payload
}

func (o *AuthServiceResetPasswordDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
