// Code generated by go-swagger; DO NOT EDIT.

package distr_config_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new distr config service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for distr config service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DistrConfigServiceActivatePool(params *DistrConfigServiceActivatePoolParams) (*DistrConfigServiceActivatePoolOK, error)

	DistrConfigServiceAssignAppToUsers(params *DistrConfigServiceAssignAppToUsersParams) (*DistrConfigServiceAssignAppToUsersOK, error)

	DistrConfigServiceAssignPoolsToApp(params *DistrConfigServiceAssignPoolsToAppParams) (*DistrConfigServiceAssignPoolsToAppOK, error)

	DistrConfigServiceAssignTagToUser(params *DistrConfigServiceAssignTagToUserParams) (*DistrConfigServiceAssignTagToUserOK, error)

	DistrConfigServiceCreateApp(params *DistrConfigServiceCreateAppParams) (*DistrConfigServiceCreateAppOK, error)

	DistrConfigServiceCreatePool(params *DistrConfigServiceCreatePoolParams) (*DistrConfigServiceCreatePoolOK, error)

	DistrConfigServiceCreatePools(params *DistrConfigServiceCreatePoolsParams) (*DistrConfigServiceCreatePoolsOK, error)

	DistrConfigServiceCreateUser(params *DistrConfigServiceCreateUserParams) (*DistrConfigServiceCreateUserOK, error)

	DistrConfigServiceDeleteApp(params *DistrConfigServiceDeleteAppParams) (*DistrConfigServiceDeleteAppOK, error)

	DistrConfigServiceDeletePool(params *DistrConfigServiceDeletePoolParams) (*DistrConfigServiceDeletePoolOK, error)

	DistrConfigServiceDeleteUser(params *DistrConfigServiceDeleteUserParams) (*DistrConfigServiceDeleteUserOK, error)

	DistrConfigServiceGetApp(params *DistrConfigServiceGetAppParams) (*DistrConfigServiceGetAppOK, error)

	DistrConfigServiceGetApps(params *DistrConfigServiceGetAppsParams) (*DistrConfigServiceGetAppsOK, error)

	DistrConfigServiceGetPool(params *DistrConfigServiceGetPoolParams) (*DistrConfigServiceGetPoolOK, error)

	DistrConfigServiceGetPoolDistribution(params *DistrConfigServiceGetPoolDistributionParams) (*DistrConfigServiceGetPoolDistributionOK, error)

	DistrConfigServiceGetPools(params *DistrConfigServiceGetPoolsParams) (*DistrConfigServiceGetPoolsOK, error)

	DistrConfigServiceGetUser(params *DistrConfigServiceGetUserParams) (*DistrConfigServiceGetUserOK, error)

	DistrConfigServiceGetUsers(params *DistrConfigServiceGetUsersParams) (*DistrConfigServiceGetUsersOK, error)

	DistrConfigServiceSetAppBundle(params *DistrConfigServiceSetAppBundleParams) (*DistrConfigServiceSetAppBundleOK, error)

	DistrConfigServiceUnassignAppFromUsers(params *DistrConfigServiceUnassignAppFromUsersParams) (*DistrConfigServiceUnassignAppFromUsersOK, error)

	DistrConfigServiceUnassignPoolsFromApp(params *DistrConfigServiceUnassignPoolsFromAppParams) (*DistrConfigServiceUnassignPoolsFromAppOK, error)

	DistrConfigServiceUnassignTagFromUser(params *DistrConfigServiceUnassignTagFromUserParams) (*DistrConfigServiceUnassignTagFromUserOK, error)

	DistrConfigServiceUpdatePool(params *DistrConfigServiceUpdatePoolParams) (*DistrConfigServiceUpdatePoolOK, error)

	DistrConfigServiceUpdatePool2(params *DistrConfigServiceUpdatePool2Params) (*DistrConfigServiceUpdatePool2OK, error)

	DistrConfigServiceValidatePoolData(params *DistrConfigServiceValidatePoolDataParams) (*DistrConfigServiceValidatePoolDataOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DistrConfigServiceActivatePool activates data pool which will enable the distribution of its data to mobile users

  Errors:
- 400    Returned when no valid pool ID is provided in the request, or
         when the pool is already active
- 403    Returned when the caller is not allowed to perform this call
- 500    Returned whenever an internall error occurs
*/
func (a *Client) DistrConfigServiceActivatePool(params *DistrConfigServiceActivatePoolParams) (*DistrConfigServiceActivatePoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDistrConfigServiceActivatePoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DistrConfigService_ActivatePool",
		Method:             "POST",
		PathPattern:        "/api/distribution/v1/pool/activate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DistrConfigServiceActivatePoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DistrConfigServiceActivatePoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DistrConfigServiceActivatePoolDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DistrConfigServiceAssignAppToUsers assigns mobile application to users
*/
func (a *Client) DistrConfigServiceAssignAppToUsers(params *DistrConfigServiceAssignAppToUsersParams) (*DistrConfigServiceAssignAppToUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDistrConfigServiceAssignAppToUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DistrConfigService_AssignAppToUsers",
		Method:             "POST",
		PathPattern:        "/api/distribution/v1/app/users/assign",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DistrConfigServiceAssignAppToUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DistrConfigServiceAssignAppToUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DistrConfigServiceAssignAppToUsersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DistrConfigServiceAssignPoolsToApp assigns data pools to mobile application
*/
func (a *Client) DistrConfigServiceAssignPoolsToApp(params *DistrConfigServiceAssignPoolsToAppParams) (*DistrConfigServiceAssignPoolsToAppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDistrConfigServiceAssignPoolsToAppParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DistrConfigService_AssignPoolsToApp",
		Method:             "POST",
		PathPattern:        "/api/distribution/v1/app/pools/assign",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DistrConfigServiceAssignPoolsToAppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DistrConfigServiceAssignPoolsToAppOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DistrConfigServiceAssignPoolsToAppDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DistrConfigServiceAssignTagToUser assigns filtering tag to user
*/
func (a *Client) DistrConfigServiceAssignTagToUser(params *DistrConfigServiceAssignTagToUserParams) (*DistrConfigServiceAssignTagToUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDistrConfigServiceAssignTagToUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DistrConfigService_AssignTagToUser",
		Method:             "POST",
		PathPattern:        "/api/distribution/v1/user/tags/assign",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DistrConfigServiceAssignTagToUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DistrConfigServiceAssignTagToUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DistrConfigServiceAssignTagToUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DistrConfigServiceCreateApp creates mobile application
*/
func (a *Client) DistrConfigServiceCreateApp(params *DistrConfigServiceCreateAppParams) (*DistrConfigServiceCreateAppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDistrConfigServiceCreateAppParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DistrConfigService_CreateApp",
		Method:             "POST",
		PathPattern:        "/api/distribution/v1/app",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DistrConfigServiceCreateAppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DistrConfigServiceCreateAppOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DistrConfigServiceCreateAppDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DistrConfigServiceCreatePool creates a data pool that can be used to distribute data to mobile users

  Errors:
- 400    Returned when no valid pool definition is provided in the request
- 403    Returned when the caller is not allowed to perform this call
- 500    Returned whenever an internall error occurs
*/
func (a *Client) DistrConfigServiceCreatePool(params *DistrConfigServiceCreatePoolParams) (*DistrConfigServiceCreatePoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDistrConfigServiceCreatePoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DistrConfigService_CreatePool",
		Method:             "POST",
		PathPattern:        "/api/distribution/v1/pool",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DistrConfigServiceCreatePoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DistrConfigServiceCreatePoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DistrConfigServiceCreatePoolDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DistrConfigServiceCreatePools creates several data pools which can be used to distribute data to mobile users

  Errors:
- 400    Returned when no valid pool definitions are provided in the request
- 403    Returned when the caller is not allowed to perform this call
- 500    Returned whenever an internall error occurs
*/
func (a *Client) DistrConfigServiceCreatePools(params *DistrConfigServiceCreatePoolsParams) (*DistrConfigServiceCreatePoolsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDistrConfigServiceCreatePoolsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DistrConfigService_CreatePools",
		Method:             "POST",
		PathPattern:        "/api/distribution/v1/pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DistrConfigServiceCreatePoolsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DistrConfigServiceCreatePoolsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DistrConfigServiceCreatePoolsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DistrConfigServiceCreateUser registers user in distribution database
*/
func (a *Client) DistrConfigServiceCreateUser(params *DistrConfigServiceCreateUserParams) (*DistrConfigServiceCreateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDistrConfigServiceCreateUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DistrConfigService_CreateUser",
		Method:             "POST",
		PathPattern:        "/api/distribution/v1/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DistrConfigServiceCreateUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DistrConfigServiceCreateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DistrConfigServiceCreateUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DistrConfigServiceDeleteApp deletes mobile application
*/
func (a *Client) DistrConfigServiceDeleteApp(params *DistrConfigServiceDeleteAppParams) (*DistrConfigServiceDeleteAppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDistrConfigServiceDeleteAppParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DistrConfigService_DeleteApp",
		Method:             "DELETE",
		PathPattern:        "/api/distribution/v1/app/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DistrConfigServiceDeleteAppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DistrConfigServiceDeleteAppOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DistrConfigServiceDeleteAppDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DistrConfigServiceDeletePool deletes data pool with all its data from the system and the mobile users devices

  Errors:
- 400    Returned when no valid pool ID is provided in the request
- 403    Returned when the caller is not allowed to perform this call
- 500    Returned whenever an internall error occurs
*/
func (a *Client) DistrConfigServiceDeletePool(params *DistrConfigServiceDeletePoolParams) (*DistrConfigServiceDeletePoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDistrConfigServiceDeletePoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DistrConfigService_DeletePool",
		Method:             "DELETE",
		PathPattern:        "/api/distribution/v1/pool/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DistrConfigServiceDeletePoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DistrConfigServiceDeletePoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DistrConfigServiceDeletePoolDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DistrConfigServiceDeleteUser deletes user from distribution db
*/
func (a *Client) DistrConfigServiceDeleteUser(params *DistrConfigServiceDeleteUserParams) (*DistrConfigServiceDeleteUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDistrConfigServiceDeleteUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DistrConfigService_DeleteUser",
		Method:             "DELETE",
		PathPattern:        "/api/distribution/v1/user/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DistrConfigServiceDeleteUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DistrConfigServiceDeleteUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DistrConfigServiceDeleteUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DistrConfigServiceGetApp gets a mobile application
*/
func (a *Client) DistrConfigServiceGetApp(params *DistrConfigServiceGetAppParams) (*DistrConfigServiceGetAppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDistrConfigServiceGetAppParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DistrConfigService_GetApp",
		Method:             "GET",
		PathPattern:        "/api/distribution/v1/app/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DistrConfigServiceGetAppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DistrConfigServiceGetAppOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DistrConfigServiceGetAppDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DistrConfigServiceGetApps gets all mobile applications
*/
func (a *Client) DistrConfigServiceGetApps(params *DistrConfigServiceGetAppsParams) (*DistrConfigServiceGetAppsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDistrConfigServiceGetAppsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DistrConfigService_GetApps",
		Method:             "GET",
		PathPattern:        "/api/distribution/v1/apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DistrConfigServiceGetAppsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DistrConfigServiceGetAppsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DistrConfigServiceGetAppsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DistrConfigServiceGetPool gets the data pool with the given ID

  Errors:
- 400    Returned when no valid pool ID is provided in the request
- 403    Returned when the caller is not allowed to perform this call
- 500    Returned whenever an internall error occurs
*/
func (a *Client) DistrConfigServiceGetPool(params *DistrConfigServiceGetPoolParams) (*DistrConfigServiceGetPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDistrConfigServiceGetPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DistrConfigService_GetPool",
		Method:             "GET",
		PathPattern:        "/api/distribution/v1/pool/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DistrConfigServiceGetPoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DistrConfigServiceGetPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DistrConfigServiceGetPoolDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DistrConfigServiceGetPoolDistribution gets the data distribution details for the pool

  Errors:
- 400    Returned when no valid pool ID is provided in the request
- 403    Returned when the caller is not allowed to perform this call
- 500    Returned whenever an internall error occurs
*/
func (a *Client) DistrConfigServiceGetPoolDistribution(params *DistrConfigServiceGetPoolDistributionParams) (*DistrConfigServiceGetPoolDistributionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDistrConfigServiceGetPoolDistributionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DistrConfigService_GetPoolDistribution",
		Method:             "GET",
		PathPattern:        "/api/distribution/v1/pool/distribution/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DistrConfigServiceGetPoolDistributionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DistrConfigServiceGetPoolDistributionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DistrConfigServiceGetPoolDistributionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DistrConfigServiceGetPools gets the list of all data pool that have been created in the system

  Errors:
- 403    Returned when the caller is not allowed to perform this call
- 500    Returned whenever an internall error occurs
*/
func (a *Client) DistrConfigServiceGetPools(params *DistrConfigServiceGetPoolsParams) (*DistrConfigServiceGetPoolsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDistrConfigServiceGetPoolsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DistrConfigService_GetPools",
		Method:             "GET",
		PathPattern:        "/api/distribution/v1/pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DistrConfigServiceGetPoolsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DistrConfigServiceGetPoolsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DistrConfigServiceGetPoolsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DistrConfigServiceGetUser fetches the user with the given ID
*/
func (a *Client) DistrConfigServiceGetUser(params *DistrConfigServiceGetUserParams) (*DistrConfigServiceGetUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDistrConfigServiceGetUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DistrConfigService_GetUser",
		Method:             "GET",
		PathPattern:        "/api/distribution/v1/user/{userID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DistrConfigServiceGetUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DistrConfigServiceGetUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DistrConfigServiceGetUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DistrConfigServiceGetUsers fetches all users in account distribution db
*/
func (a *Client) DistrConfigServiceGetUsers(params *DistrConfigServiceGetUsersParams) (*DistrConfigServiceGetUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDistrConfigServiceGetUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DistrConfigService_GetUsers",
		Method:             "GET",
		PathPattern:        "/api/distribution/v1/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DistrConfigServiceGetUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DistrConfigServiceGetUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DistrConfigServiceGetUsersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DistrConfigServiceSetAppBundle sets the mobile application bundle
*/
func (a *Client) DistrConfigServiceSetAppBundle(params *DistrConfigServiceSetAppBundleParams) (*DistrConfigServiceSetAppBundleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDistrConfigServiceSetAppBundleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DistrConfigService_SetAppBundle",
		Method:             "POST",
		PathPattern:        "/api/distribution/v1/app/{id}/bundle",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DistrConfigServiceSetAppBundleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DistrConfigServiceSetAppBundleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DistrConfigServiceSetAppBundleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DistrConfigServiceUnassignAppFromUsers unassigns mobile application from users
*/
func (a *Client) DistrConfigServiceUnassignAppFromUsers(params *DistrConfigServiceUnassignAppFromUsersParams) (*DistrConfigServiceUnassignAppFromUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDistrConfigServiceUnassignAppFromUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DistrConfigService_UnassignAppFromUsers",
		Method:             "POST",
		PathPattern:        "/api/distribution/v1/app/users/unassign",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DistrConfigServiceUnassignAppFromUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DistrConfigServiceUnassignAppFromUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DistrConfigServiceUnassignAppFromUsersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DistrConfigServiceUnassignPoolsFromApp unassigns data pool from mobile application
*/
func (a *Client) DistrConfigServiceUnassignPoolsFromApp(params *DistrConfigServiceUnassignPoolsFromAppParams) (*DistrConfigServiceUnassignPoolsFromAppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDistrConfigServiceUnassignPoolsFromAppParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DistrConfigService_UnassignPoolsFromApp",
		Method:             "POST",
		PathPattern:        "/api/distribution/v1/app/pools/unassign",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DistrConfigServiceUnassignPoolsFromAppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DistrConfigServiceUnassignPoolsFromAppOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DistrConfigServiceUnassignPoolsFromAppDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DistrConfigServiceUnassignTagFromUser unassigns filtering tag from user
*/
func (a *Client) DistrConfigServiceUnassignTagFromUser(params *DistrConfigServiceUnassignTagFromUserParams) (*DistrConfigServiceUnassignTagFromUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDistrConfigServiceUnassignTagFromUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DistrConfigService_UnassignTagFromUser",
		Method:             "POST",
		PathPattern:        "/api/distribution/v1/user/tags/unassign",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DistrConfigServiceUnassignTagFromUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DistrConfigServiceUnassignTagFromUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DistrConfigServiceUnassignTagFromUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DistrConfigServiceUpdatePool updates an already existing data pool

  Errors:
- 400    Returned when no valid pool definition is provided in the request
- 404    Returned when a pool with the given ID does not exist
- 403    Returned when the caller is not allowed to perform this call
- 500    Returned whenever an internall error occurs
*/
func (a *Client) DistrConfigServiceUpdatePool(params *DistrConfigServiceUpdatePoolParams) (*DistrConfigServiceUpdatePoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDistrConfigServiceUpdatePoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DistrConfigService_UpdatePool",
		Method:             "PUT",
		PathPattern:        "/api/distribution/v1/pool",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DistrConfigServiceUpdatePoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DistrConfigServiceUpdatePoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DistrConfigServiceUpdatePoolDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DistrConfigServiceUpdatePool2 updates an already existing data pool

  Errors:
- 400    Returned when no valid pool definition is provided in the request
- 404    Returned when a pool with the given ID does not exist
- 403    Returned when the caller is not allowed to perform this call
- 500    Returned whenever an internall error occurs
*/
func (a *Client) DistrConfigServiceUpdatePool2(params *DistrConfigServiceUpdatePool2Params) (*DistrConfigServiceUpdatePool2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDistrConfigServiceUpdatePool2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DistrConfigService_UpdatePool2",
		Method:             "PATCH",
		PathPattern:        "/api/distribution/v1/pool/{dataPool.id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DistrConfigServiceUpdatePool2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DistrConfigServiceUpdatePool2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DistrConfigServiceUpdatePool2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DistrConfigServiceValidatePoolData validates pool data against pool specification

  Errors:
- 400    Returned when no valid pool definition is provided in the request
- 403    Returned when the caller is not allowed to perform this call
- 500    Returned whenever an internall error occurs
*/
func (a *Client) DistrConfigServiceValidatePoolData(params *DistrConfigServiceValidatePoolDataParams) (*DistrConfigServiceValidatePoolDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDistrConfigServiceValidatePoolDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DistrConfigService_ValidatePoolData",
		Method:             "POST",
		PathPattern:        "/api/distribution/v1/pool/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DistrConfigServiceValidatePoolDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DistrConfigServiceValidatePoolDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DistrConfigServiceValidatePoolDataDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
