// Code generated by go-swagger; DO NOT EDIT.

package functions_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewFunctionsServiceCallAsyncFunctionParams creates a new FunctionsServiceCallAsyncFunctionParams object
// with the default values initialized.
func NewFunctionsServiceCallAsyncFunctionParams() *FunctionsServiceCallAsyncFunctionParams {
	var ()
	return &FunctionsServiceCallAsyncFunctionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewFunctionsServiceCallAsyncFunctionParamsWithTimeout creates a new FunctionsServiceCallAsyncFunctionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewFunctionsServiceCallAsyncFunctionParamsWithTimeout(timeout time.Duration) *FunctionsServiceCallAsyncFunctionParams {
	var ()
	return &FunctionsServiceCallAsyncFunctionParams{

		timeout: timeout,
	}
}

// NewFunctionsServiceCallAsyncFunctionParamsWithContext creates a new FunctionsServiceCallAsyncFunctionParams object
// with the default values initialized, and the ability to set a context for a request
func NewFunctionsServiceCallAsyncFunctionParamsWithContext(ctx context.Context) *FunctionsServiceCallAsyncFunctionParams {
	var ()
	return &FunctionsServiceCallAsyncFunctionParams{

		Context: ctx,
	}
}

// NewFunctionsServiceCallAsyncFunctionParamsWithHTTPClient creates a new FunctionsServiceCallAsyncFunctionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewFunctionsServiceCallAsyncFunctionParamsWithHTTPClient(client *http.Client) *FunctionsServiceCallAsyncFunctionParams {
	var ()
	return &FunctionsServiceCallAsyncFunctionParams{
		HTTPClient: client,
	}
}

/*FunctionsServiceCallAsyncFunctionParams contains all the parameters to send to the API endpoint
for the functions service call async function operation typically these are written to a http.Request
*/
type FunctionsServiceCallAsyncFunctionParams struct {

	/*Body*/
	Body interface{}
	/*CallID*/
	CallID string
	/*Reason*/
	Reason string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the functions service call async function params
func (o *FunctionsServiceCallAsyncFunctionParams) WithTimeout(timeout time.Duration) *FunctionsServiceCallAsyncFunctionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the functions service call async function params
func (o *FunctionsServiceCallAsyncFunctionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the functions service call async function params
func (o *FunctionsServiceCallAsyncFunctionParams) WithContext(ctx context.Context) *FunctionsServiceCallAsyncFunctionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the functions service call async function params
func (o *FunctionsServiceCallAsyncFunctionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the functions service call async function params
func (o *FunctionsServiceCallAsyncFunctionParams) WithHTTPClient(client *http.Client) *FunctionsServiceCallAsyncFunctionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the functions service call async function params
func (o *FunctionsServiceCallAsyncFunctionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the functions service call async function params
func (o *FunctionsServiceCallAsyncFunctionParams) WithBody(body interface{}) *FunctionsServiceCallAsyncFunctionParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the functions service call async function params
func (o *FunctionsServiceCallAsyncFunctionParams) SetBody(body interface{}) {
	o.Body = body
}

// WithCallID adds the callID to the functions service call async function params
func (o *FunctionsServiceCallAsyncFunctionParams) WithCallID(callID string) *FunctionsServiceCallAsyncFunctionParams {
	o.SetCallID(callID)
	return o
}

// SetCallID adds the callId to the functions service call async function params
func (o *FunctionsServiceCallAsyncFunctionParams) SetCallID(callID string) {
	o.CallID = callID
}

// WithReason adds the reason to the functions service call async function params
func (o *FunctionsServiceCallAsyncFunctionParams) WithReason(reason string) *FunctionsServiceCallAsyncFunctionParams {
	o.SetReason(reason)
	return o
}

// SetReason adds the reason to the functions service call async function params
func (o *FunctionsServiceCallAsyncFunctionParams) SetReason(reason string) {
	o.Reason = reason
}

// WriteToRequest writes these params to a swagger request
func (o *FunctionsServiceCallAsyncFunctionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param call.id
	if err := r.SetPathParam("call.id", o.CallID); err != nil {
		return err
	}

	// path param reason
	if err := r.SetPathParam("reason", o.Reason); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
