// Code generated by go-swagger; DO NOT EDIT.

package functions_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new functions service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for functions service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	FunctionsServiceCallAsyncFunction(params *FunctionsServiceCallAsyncFunctionParams) (*FunctionsServiceCallAsyncFunctionOK, error)

	FunctionsServiceCallSyncFunction(params *FunctionsServiceCallSyncFunctionParams) (*FunctionsServiceCallSyncFunctionOK, error)

	FunctionsServiceCallTestFunction(params *FunctionsServiceCallTestFunctionParams) (*FunctionsServiceCallTestFunctionOK, error)

	FunctionsServiceCreateFunction(params *FunctionsServiceCreateFunctionParams) (*FunctionsServiceCreateFunctionOK, error)

	FunctionsServiceDeleteFunction(params *FunctionsServiceDeleteFunctionParams) (*FunctionsServiceDeleteFunctionOK, error)

	FunctionsServiceGetFunction(params *FunctionsServiceGetFunctionParams) (*FunctionsServiceGetFunctionOK, error)

	FunctionsServiceGetFunctions(params *FunctionsServiceGetFunctionsParams) (*FunctionsServiceGetFunctionsOK, error)

	FunctionsServiceUpdateFunction(params *FunctionsServiceUpdateFunctionParams) (*FunctionsServiceUpdateFunctionOK, error)

	FunctionsServiceUpdateFunction2(params *FunctionsServiceUpdateFunction2Params) (*FunctionsServiceUpdateFunction2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  FunctionsServiceCallAsyncFunction posts function for execution in async way
*/
func (a *Client) FunctionsServiceCallAsyncFunction(params *FunctionsServiceCallAsyncFunctionParams) (*FunctionsServiceCallAsyncFunctionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFunctionsServiceCallAsyncFunctionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FunctionsService_CallAsyncFunction",
		Method:             "POST",
		PathPattern:        "/api/func/v1/post-call/{reason}/{call.id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FunctionsServiceCallAsyncFunctionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FunctionsServiceCallAsyncFunctionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FunctionsServiceCallAsyncFunctionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FunctionsServiceCallSyncFunction calls a function synchroniously
*/
func (a *Client) FunctionsServiceCallSyncFunction(params *FunctionsServiceCallSyncFunctionParams) (*FunctionsServiceCallSyncFunctionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFunctionsServiceCallSyncFunctionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FunctionsService_CallSyncFunction",
		Method:             "POST",
		PathPattern:        "/api/func/v1/call-sync/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FunctionsServiceCallSyncFunctionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FunctionsServiceCallSyncFunctionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FunctionsServiceCallSyncFunctionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FunctionsServiceCallTestFunction tests a function call
*/
func (a *Client) FunctionsServiceCallTestFunction(params *FunctionsServiceCallTestFunctionParams) (*FunctionsServiceCallTestFunctionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFunctionsServiceCallTestFunctionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FunctionsService_CallTestFunction",
		Method:             "POST",
		PathPattern:        "/api/func/v1/call-test/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FunctionsServiceCallTestFunctionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FunctionsServiceCallTestFunctionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FunctionsServiceCallTestFunctionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FunctionsServiceCreateFunction creates function
*/
func (a *Client) FunctionsServiceCreateFunction(params *FunctionsServiceCreateFunctionParams) (*FunctionsServiceCreateFunctionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFunctionsServiceCreateFunctionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FunctionsService_CreateFunction",
		Method:             "POST",
		PathPattern:        "/api/func/v1/function",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FunctionsServiceCreateFunctionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FunctionsServiceCreateFunctionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FunctionsServiceCreateFunctionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FunctionsServiceDeleteFunction deletes function
*/
func (a *Client) FunctionsServiceDeleteFunction(params *FunctionsServiceDeleteFunctionParams) (*FunctionsServiceDeleteFunctionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFunctionsServiceDeleteFunctionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FunctionsService_DeleteFunction",
		Method:             "DELETE",
		PathPattern:        "/api/func/v1/function/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FunctionsServiceDeleteFunctionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FunctionsServiceDeleteFunctionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FunctionsServiceDeleteFunctionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FunctionsServiceGetFunction gets function
*/
func (a *Client) FunctionsServiceGetFunction(params *FunctionsServiceGetFunctionParams) (*FunctionsServiceGetFunctionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFunctionsServiceGetFunctionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FunctionsService_GetFunction",
		Method:             "GET",
		PathPattern:        "/api/func/v1/function/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FunctionsServiceGetFunctionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FunctionsServiceGetFunctionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FunctionsServiceGetFunctionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FunctionsServiceGetFunctions fetches all functions
*/
func (a *Client) FunctionsServiceGetFunctions(params *FunctionsServiceGetFunctionsParams) (*FunctionsServiceGetFunctionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFunctionsServiceGetFunctionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FunctionsService_GetFunctions",
		Method:             "GET",
		PathPattern:        "/api/func/v1/functions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FunctionsServiceGetFunctionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FunctionsServiceGetFunctionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FunctionsServiceGetFunctionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FunctionsServiceUpdateFunction updates function
*/
func (a *Client) FunctionsServiceUpdateFunction(params *FunctionsServiceUpdateFunctionParams) (*FunctionsServiceUpdateFunctionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFunctionsServiceUpdateFunctionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FunctionsService_UpdateFunction",
		Method:             "PUT",
		PathPattern:        "/api/func/v1/function",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FunctionsServiceUpdateFunctionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FunctionsServiceUpdateFunctionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FunctionsServiceUpdateFunctionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FunctionsServiceUpdateFunction2 updates function
*/
func (a *Client) FunctionsServiceUpdateFunction2(params *FunctionsServiceUpdateFunction2Params) (*FunctionsServiceUpdateFunction2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFunctionsServiceUpdateFunction2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FunctionsService_UpdateFunction2",
		Method:             "PATCH",
		PathPattern:        "/api/func/v1/function/{function.id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FunctionsServiceUpdateFunction2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FunctionsServiceUpdateFunction2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FunctionsServiceUpdateFunction2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
