// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1QueryMetricsRequest The QueryMetricsRequest is used to retrieve data for a specific metric in
// a time period. Additionally, filters can be provided to only retrieve data
// points for a certain label, as well as aggregations, that can be used to
// get a summary over the underlying data.
//
// swagger:model v1QueryMetricsRequest
type V1QueryMetricsRequest struct {

	// aggregations
	Aggregations []*V1MetricAggregation `json:"aggregations"`

	// filters
	Filters []*V1LabelFilter `json:"filters"`

	// metric
	Metric string `json:"metric,omitempty"`

	// time from
	TimeFrom string `json:"time_from,omitempty"`

	// time till
	TimeTill string `json:"time_till,omitempty"`
}

// Validate validates this v1 query metrics request
func (m *V1QueryMetricsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAggregations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1QueryMetricsRequest) validateAggregations(formats strfmt.Registry) error {
	if swag.IsZero(m.Aggregations) { // not required
		return nil
	}

	for i := 0; i < len(m.Aggregations); i++ {
		if swag.IsZero(m.Aggregations[i]) { // not required
			continue
		}

		if m.Aggregations[i] != nil {
			if err := m.Aggregations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("aggregations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1QueryMetricsRequest) validateFilters(formats strfmt.Registry) error {
	if swag.IsZero(m.Filters) { // not required
		return nil
	}

	for i := 0; i < len(m.Filters); i++ {
		if swag.IsZero(m.Filters[i]) { // not required
			continue
		}

		if m.Filters[i] != nil {
			if err := m.Filters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1 query metrics request based on the context it is used
func (m *V1QueryMetricsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAggregations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1QueryMetricsRequest) contextValidateAggregations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Aggregations); i++ {

		if m.Aggregations[i] != nil {
			if err := m.Aggregations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("aggregations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1QueryMetricsRequest) contextValidateFilters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Filters); i++ {

		if m.Filters[i] != nil {
			if err := m.Filters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1QueryMetricsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1QueryMetricsRequest) UnmarshalBinary(b []byte) error {
	var res V1QueryMetricsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
