// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1Account v1 account
//
// swagger:model v1Account
type V1Account struct {

	// account ID
	AccountID string `json:"accountID,omitempty"`

	// contact details
	ContactDetails *V1ContactDetails `json:"contactDetails,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// payment details
	PaymentDetails *V1PaymentDetails `json:"paymentDetails,omitempty"`

	// status
	Status AccountAccountStatus `json:"status,omitempty"`
}

// Validate validates this v1 account
func (m *V1Account) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContactDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Account) validateContactDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.ContactDetails) { // not required
		return nil
	}

	if m.ContactDetails != nil {
		if err := m.ContactDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactDetails")
			}
			return err
		}
	}

	return nil
}

func (m *V1Account) validatePaymentDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentDetails) { // not required
		return nil
	}

	if m.PaymentDetails != nil {
		if err := m.PaymentDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentDetails")
			}
			return err
		}
	}

	return nil
}

func (m *V1Account) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Account) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Account) UnmarshalBinary(b []byte) error {
	var res V1Account
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
