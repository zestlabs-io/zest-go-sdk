// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataDocument data document
//
// swagger:model dataDocument
type DataDocument struct {

	// id
	// Required: true
	ID *string `json:"_id"`

	// rev
	Rev string `json:"_rev,omitempty"`

	// Optional field for USER and FILTERED pools.
	Tags []string `json:"tags"`

	// data document additional properties
	DataDocumentAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *DataDocument) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// id
		// Required: true
		ID *string `json:"_id"`

		// rev
		Rev string `json:"_rev,omitempty"`

		// Optional field for USER and FILTERED pools.
		Tags []string `json:"tags"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv DataDocument

	rcv.ID = stage1.ID
	rcv.Rev = stage1.Rev
	rcv.Tags = stage1.Tags
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "_id")
	delete(stage2, "_rev")
	delete(stage2, "tags")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.DataDocumentAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m DataDocument) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// id
		// Required: true
		ID *string `json:"_id"`

		// rev
		Rev string `json:"_rev,omitempty"`

		// Optional field for USER and FILTERED pools.
		Tags []string `json:"tags"`
	}

	stage1.ID = m.ID
	stage1.Rev = m.Rev
	stage1.Tags = m.Tags

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.DataDocumentAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.DataDocumentAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this data document
func (m *DataDocument) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataDocument) validateID(formats strfmt.Registry) error {

	if err := validate.Required("_id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataDocument) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataDocument) UnmarshalBinary(b []byte) error {
	var res DataDocument
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
